package gameOfLife;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

public class GameBoard extends CommonScreenAttributes{
	
	private Frame mainFrame;
	private Label headerLabel, statusLabel;
	private Panel controlPanel;
	private GameCanvas gameCanvas;
	private GameTurnTimer gameTurnTimer;
	private GameLogic gameLogic;
	private BufferedImage logo, fallsImage, uniImage, cathedralImage, titanicImage;
	private MainGameBoardTiles mainGameBoardTiles;
	private GameSpinner spinner;
	private boolean isSavedGame;
	
	
	// Creating all the decks for the board//
	private Decks<Careers> uniCareers = new Decks<Careers>(0, 0, "resizedimages/Card_Career/deck_Career.png");
	private Decks<Careers> careers = new Decks<Careers>(0, 0, "resizedimages/Card_Uni/deck_Uni.png");
	private Decks<GameAssetHouse> uniHouses = new Decks<GameAssetHouse>(0, 0, "resizedimages/Card_House/deck_House.png");
	private Decks<GameAssetHouse> fallsHouses = new Decks<GameAssetHouse>(0, 0, "resizedimages/Card_House/deck_House.png");
	private Decks<GameAssetHouse> cathedralHouses = new Decks<GameAssetHouse>(0, 0, "resizedimages/Card_House/deck_House.png");
	private Decks<GameAssetHouse> titanicHouses = new Decks<GameAssetHouse>(0, 0, "resizedimages/Card_House/deck_House.png");
	
	//Create arrayList to hold all attractions//
	ArrayList<GameAssetAttraction> attractions = new ArrayList<GameAssetAttraction>();
	
	public GameBoard(ArrayList<GamePlayer> players)
	{
		populateCareersDecks();
		populateHouseDecks();
		populateAttractions();
		
		prepareGUI();
		
		try
	    {
	    	this.logo = ImageIO.read(getClass().getResource("gameoflifequblogosml.png"));
	    	this.fallsImage = ImageIO.read(getClass().getResource("resizedimages/Quarter_Img05.png"));
	    	this.uniImage = ImageIO.read(getClass().getResource("resizedimages/Quarter_Img03.png"));
	    	this.cathedralImage = ImageIO.read(getClass().getResource("resizedimages/Quarter_Img04.png"));
	    	this.titanicImage = ImageIO.read(getClass().getResource("resizedimages/Quarter_Img02.png"));
	    }
	    catch (IOException e) 
	    {
	        System.out.println(e.toString());
	        e.printStackTrace();
	    }
		
		mainGameBoardTiles = new MainGameBoardTiles();
		gameLogic = new GameLogic(players, this, null);
		
		// gameTurnTimer = new GameTurnTimer(gameLogic);
		spinner = new GameSpinner(100, 100, gameLogic);

	}
	
	public void prepareGUI()
	{
		mainFrame = new Frame("QUB Life Game");
		mainFrame.setIgnoreRepaint(true);
		
		controlPanel = new Panel();
		controlPanel.setBackground(new Color(232,181,30));
	
	    mainFrame.add(controlPanel);
	    mainFrame.setExtendedState(Frame.MAXIMIZED_BOTH); 
	    mainFrame.setVisible(true);  
	    mainFrame.setResizable(false);
	    mainFrame.setMenuBar(setupMenuBarExceptSave(mainFrame, null, this));
	    mainFrame.getMenuBar().setFont(new Font("Arial", Font.BOLD, 14));
	}
	
	public void showCanvasDemo()
	{
		gameCanvas = new GameCanvas(this);
	    controlPanel.add(gameCanvas); 
	    
		String retirementAge = "";
		
		do
		{
			retirementAge = JOptionPane.showInputDialog(null, "Set Retirement Age (50-80)");
			
		}while(!inputIsInt(retirementAge) || Integer.parseInt(retirementAge) < 50 || Integer.parseInt(retirementAge) > 80);
	    
	    
	    gameLogic.setRetirementAge(Integer.parseInt(retirementAge));
	    
	    gameLogic.startGameOnFirstPlayer();
    } 
	
	public boolean inputIsInt(String inputString)
	{
		try
		{
			Integer.parseInt(inputString); 
		}
		catch(NumberFormatException | NullPointerException e) 
		{ 
			return false; 
		}
		
		return true;
	}
	
	public void exitGameChoice()
	{
		Object[] options = { "Exit Game", "Remain In Game" };
		int choice = JOptionPane.showOptionDialog(mainFrame, "Are you sure you wish to exit the game?", "Exit Game?",
		             JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
		             null, options, options[0]);
		
		if(choice == 0)
		{
			mainFrame.dispose();
			System.exit(0);
		}
	}
	
	
	public void updateGameBoard()
	{
		gameCanvas.repaint();
	}
	
	public void populateCareersDecks()
	{
		Careers career1 = new Careers("resizedimages/Card_Career/card_Career01.png", "Artist", 5000);
		careers.addCard(career1);
		Careers career2 = new Careers("resizedimages/Card_Career/card_Career02.png", "Chef", 10000);
		careers.addCard(career2);
		Careers career3 = new Careers("resizedimages/Card_Career/card_Career03.png", "Manager", 25000);
		careers.addCard(career3);
		Careers career4 = new Careers("resizedimages/Card_Career/card_Career04.png", "Fireman", 8000);
		careers.addCard(career4);
		Careers career5 = new Careers("resizedimages/Card_Career/card_Career05.png", "Police", 7000);
		careers.addCard(career5);
		
		Careers uniCareer1 = new Careers("resizedimages/Card_Uni/card_Uni01.png", "Doctor", 40000);
		uniCareers.addCard(uniCareer1);
		Careers uniCareer2 = new Careers("resizedimages/Card_Uni/card_Uni02.png", "Accountant", 30000);
		uniCareers.addCard(uniCareer2);
		Careers uniCareer3 = new Careers("resizedimages/Card_Uni/card_Uni03.png", "Software Engineer", 90000);
		uniCareers.addCard(uniCareer3);
		Careers uniCareer4 = new Careers("resizedimages/Card_Uni/card_Uni04.png", "Chemical Engineer", 30000);
		uniCareers.addCard(uniCareer4);
		Careers uniCareer5 = new Careers("resizedimages/Card_Uni/card_Uni05.png", "Lawyer", 50000);
		uniCareers.addCard(uniCareer5);
	}
	
	public void populateHouseDecks()
	{
		
	}
	
	public void populateAttractions()
	{
		GameAssetAttraction attraction1 = new GameAssetAttraction(50, 100, "Frisbee", "resizedimages/Card_Souvineers/card_Sou01.png");
		attractions.add(attraction1);
		GameAssetAttraction attraction2 = new GameAssetAttraction(100, 150, "Ticket Stub", "resizedimages/Card_Souvineers/card_Sou02.png");
		attractions.add(attraction2);
		GameAssetAttraction attraction3 = new GameAssetAttraction(150, 200, "Candle", "resizedimages/Card_Souvineers/card_Sou03.png");
		attractions.add(attraction3);
		GameAssetAttraction attraction4 = new GameAssetAttraction(100, 200, "Flim Ticket", "resizedimages/Card_Souvineers/card_Sou04.png");
		attractions.add(attraction4);
		GameAssetAttraction attraction5 = new GameAssetAttraction(150, 250, "Selfie at Lanyon & QUB Hoodie", "resizedimages/Card_Souvineers/card_Sou05.png");
		attractions.add(attraction5);
		GameAssetAttraction attraction6 = new GameAssetAttraction(200, 300, "Tenants Vital Festival Gear", "resizedimages/Card_Souvineers/card_Sou06.png");
		attractions.add(attraction6);
		GameAssetAttraction attraction7 = new GameAssetAttraction(150, 350, "Selfie with Big Fish", "resizedimages/Card_Souvineers/card_Sou07.png");
		attractions.add(attraction7);
		GameAssetAttraction attraction8 = new GameAssetAttraction(200, 400, "Replica Painting", "resizedimages/Card_Souvineers/card_Sou08.png");
		attractions.add(attraction8);
		GameAssetAttraction attraction9 = new GameAssetAttraction(250, 450, "Crate of Local Beer", "resizedimages/Card_Souvineers/card_Sou09.png");
		attractions.add(attraction9);
		GameAssetAttraction attraction10 = new GameAssetAttraction(200, 500, "Replica Titanic Boat", "resizedimages/Card_Souvineers/card_Sou10.png");
		attractions.add(attraction10);
		GameAssetAttraction attraction11 = new GameAssetAttraction(250, 550, "Titanic: Studios Game of Thrones Merch", "resizedimages/Card_Souvineers/card_Sou11.png");
		attractions.add(attraction11);
		GameAssetAttraction attraction12 = new GameAssetAttraction(300, 600, "Titanic: SSE Arena Concert Tickets & VIP", "resizedimages/Card_Souvineers/card_Sou12.png");
		attractions.add(attraction12);
	}
	
	public Frame getMainFrame() {
		return mainFrame;
	}

	public void setMainFrame(Frame mainFrame) {
		this.mainFrame = mainFrame;
	}

	public Label getHeaderLabel() {
		return headerLabel;
	}

	public void setHeaderLabel(Label headerLabel) {
		this.headerLabel = headerLabel;
	}

	public Label getStatusLabel() {
		return statusLabel;
	}

	public void setStatusLabel(Label statusLabel) {
		this.statusLabel = statusLabel;
	}

	public Panel getControlPanel() {
		return controlPanel;
	}

	public void setControlPanel(Panel controlPanel) {
		this.controlPanel = controlPanel;
	}

	public GameCanvas getGameCanvas() {
		return gameCanvas;
	}

	public void setGameCanvas(GameCanvas gameCanvas) {
		this.gameCanvas = gameCanvas;
	}
	
	public GameLogic getGameLogic() {
		return gameLogic;
	}

	public void setGameLogic(GameLogic gameLogic) {
		this.gameLogic = gameLogic;
	}
	
	/*

	public GameTurnTimer getGameTurnTimer() {
		return gameTurnTimer;
	}

	public void setGameTurnTimer(GameTurnTimer gameTurnTimer) {
		this.gameTurnTimer = gameTurnTimer;
	}
	
	*/

	public BufferedImage getLogo() {
		return logo;
	}

	public void setLogo(BufferedImage logo) {
		this.logo = logo;
	}

	public boolean isSavedGame() {
		return isSavedGame;
	}

	public void setSavedGame(boolean isSavedGame) {
		this.isSavedGame = isSavedGame;
	}

	public Decks<Careers> getUniCareers() {
		return uniCareers;
	}

	public void setUniCareers(Decks<Careers> uniCareers) {
		this.uniCareers = uniCareers;
	}

	public Decks<Careers> getCareers() {
		return careers;
	}

	public void setCareers(Decks<Careers> careers) {
		this.careers = careers;
	}

	public ArrayList<GameAssetAttraction> getAttractions() {
		return attractions;
	}

	public void setAttractions(ArrayList<GameAssetAttraction> attractions) {
		this.attractions = attractions;
	}

	public Decks<GameAssetHouse> getUniHouses() {
		return uniHouses;
	}

	public void setUniHouses(Decks<GameAssetHouse> uniHouses) {
		this.uniHouses = uniHouses;
	}

	public Decks<GameAssetHouse> getFallsHouses() {
		return fallsHouses;
	}

	public void setFallsHouses(Decks<GameAssetHouse> fallsHouses) {
		this.fallsHouses = fallsHouses;
	}

	public Decks<GameAssetHouse> getCathedralHouses() {
		return cathedralHouses;
	}

	public void setCathedralHouses(Decks<GameAssetHouse> cathedralHouses) {
		this.cathedralHouses = cathedralHouses;
	}

	public Decks<GameAssetHouse> getTitanicHouses() {
		return titanicHouses;
	}

	public void setTitanicHouses(Decks<GameAssetHouse> titanicHouses) {
		this.titanicHouses = titanicHouses;
	}

	public MainGameBoardTiles getMainGameBoardTiles() {
		return mainGameBoardTiles;
	}

	public void setMainGameBoardTiles(MainGameBoardTiles mainGameBoardTiles) {
		this.mainGameBoardTiles = mainGameBoardTiles;
	}

	public GameSpinner getSpinner() {
		return spinner;
	}

	public void setSpinner(GameSpinner spinner) {
		this.spinner = spinner;
	}

class GameCanvas extends Canvas {
	
	private GameBoard board;
	private Graphics2D g2;
	private boolean initialPaint;
	private Rectangle gameCanvasBounds;

      public GameCanvas(GameBoard board) 
      {
    	  this.initialPaint = true;
    	  this.board = board;
    	  // 232,181,30
          setBackground(new Color(232,181,30));
          setSize(board.getMainFrame().getWidth(), board.getMainFrame().getHeight());
          setUpMouseClickListeners();
      }

      public void paint(Graphics g) 
      {
         g2 = (Graphics2D) g;
         g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
         
         if(initialPaint)
         {
        	gameCanvasBounds = g2.getDeviceConfiguration().getBounds();
        	// System.out.println(gameCanvasBounds.getWidth() + " | " + gameCanvasBounds.getHeight());
       	  	spinner.setxCoord((gameCanvasBounds.width / 2) - (spinner.getEntityImage().getWidth() / 2) + 100);
       	  	spinner.setyCoord((gameCanvasBounds.height / 2) - (spinner.getEntityImage().getHeight() / 2));
       	  	
       	  	mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().setxCoord(spinner.getxCoord() - mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().getEntityImage().getWidth() - 159);
       	  	mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().setyCoord(spinner.getyCoord() - mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().getEntityImage().getHeight() - 30);
             	  	
       	  	if(isSavedGame)
       	  	{
	       	  	for (GamePlayer player : gameLogic.getPlayers()) 
	       	  	{
					player.getCurrentTileNode().getTile().movePlayerCoordsToTile(player);
				}
       	  	}
       	  	else
       	  	{
	       	  	for (GamePlayer player : gameLogic.getPlayers()) 
	       	  	{
					player.setCurrentTileNode(mainGameBoardTiles.getGameBoardTileList().getHeadTileNode());
					mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().setPlayerOnTile(player);
				}
       	  	}
       	  	
       	  	
       	  	mainGameBoardTiles.buildListsAfterSetup();
       	
       	  	initialPaint = false;
         }
         
         drawLists(g2);
         drawLogo(g2);
         drawPlayerStats(g2);
         
         if(spinner.isSpinning())
         {
        	 drawPlayers(g2);
        	 spinner.drawEntity(g2);
         }
         else
         {
        	 spinner.drawEntity(g2);
        	 drawPlayers(g2);
         }
      }
      
      public void drawLogo(Graphics2D graphicsPanel)
      {
    	  int yCoordLocal = 5;
    	  graphicsPanel.drawImage(logo,  (gameCanvasBounds.width / 2) - (logo.getWidth() / 2), yCoordLocal, null);
    	  yCoordLocal += logo.getHeight() + 30;
    	  
    	  graphicsPanel.setFont(new Font("Arial", Font.BOLD, 28));
    	  
    	  String currentPlayerText = "Current Player: " + gameLogic.getCurrentPlayer().getPlayerName();
    	  int midPointForText = (gameCanvasBounds.width / 2) - (graphicsPanel.getFontMetrics().stringWidth(currentPlayerText) / 2);
    	  
    	  graphicsPanel.drawString(currentPlayerText, midPointForText, yCoordLocal);
    	  
    	  //Draw quarter images//
    	  graphicsPanel.drawImage(fallsImage, mainGameBoardTiles.getFalls3Node().getTile().getxCoord() + 85, mainGameBoardTiles.getFalls3Node().getTile().getyCoord() + 85, null);
    	  graphicsPanel.drawImage(uniImage, mainGameBoardTiles.getUniversityNode7().getTile().getxCoord() + 85, mainGameBoardTiles.getUniversityNode7().getTile().getyCoord() + 85, null);
    	  graphicsPanel.drawImage(cathedralImage, mainGameBoardTiles.getMainNode8().getTile().getxCoord() + 85, mainGameBoardTiles.getMainNode8().getTile().getyCoord() + 85, null);
    	  graphicsPanel.drawImage(titanicImage, mainGameBoardTiles.getMainNode17().getTile().getxCoord() + 85, mainGameBoardTiles.getMainNode17().getTile().getyCoord() + 85, null);
      }
      
      public void drawPlayers(Graphics2D graphicsPanel)
      {
    	  for (GamePlayer player : gameLogic.getPlayers()) 
    	  {
    		  if(player.isInGame())
    		  {
    			  player.drawEntity(graphicsPanel);
    		  }
    	  }
      }
      
      public void drawLists(Graphics2D graphicsPanel)
      {
    	  mainGameBoardTiles.getGameBoardTileList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getFallsRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getTitanicRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getCathedralRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getUniRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getQubList().drawList(graphicsPanel);
      }
      
      public void drawPlayerStats(Graphics2D graphicsPanel)
      {
    	  int yCoord = 50; 
    	  
    	  for (GamePlayer player : gameLogic.getPlayersRanked()) 
    	  {
    		  player.drawPlayerStats(graphicsPanel, 50, yCoord);
    		  yCoord += graphicsPanel.getFontMetrics().getHeight() * 5;
    		  yCoord += player.getRetireEarlyButton().getEntityImage().getHeight() + 40;
    	  }
      }
      
      public void setUpMouseClickListeners()
      {
    	  this.addMouseListener(new MouseListener() {
   			
   			@Override
   			public void mouseReleased(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mousePressed(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseExited(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseEntered(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseClicked(MouseEvent e) {
   				// TODO Auto-generated method stub
   				gameLogic.mouseClickedLogic(e.getX(), e.getY(), GameBoard.this);
   			}
   		 });  
      }
      
      public Graphics2D getG2()
      {
    	  return g2;
      }
   }
}