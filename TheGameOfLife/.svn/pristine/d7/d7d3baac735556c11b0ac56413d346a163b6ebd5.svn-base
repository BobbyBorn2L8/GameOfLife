package gameOfLife;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import javax.imageio.ImageIO;

public class GameBoard extends CommonScreenAttributes{
	
	private Frame mainFrame;
	private Label headerLabel, statusLabel;
	private Panel controlPanel;
	private GameCanvas gameCanvas;
	private GameTurnTimer gameTurnTimer;
	private GameLogic gameLogic;
	private BufferedImage logo;
	private MainGameBoardTiles mainGameBoardTiles;
	private GameSpinner spinner;
	private boolean isSavedGame;
	// Creating all the decks for the board//
	private Decks<Careers> uniCareers = new Decks<Careers>(0, 0, "Need Deck image");
	private Decks<Careers> careers = new Decks<Careers>(0, 0, "Need Deck image");
	private Decks<GameAssetHouse> uniHouses = new Decks<GameAssetHouse>(0, 0, "Need Deck image");
	private Decks<GameAssetHouse> fallsHouses = new Decks<GameAssetHouse>(0, 0, "Need Deck image");
	private Decks<GameAssetHouse> cathedralHouses = new Decks<GameAssetHouse>(0, 0, "Need Deck image");
	private Decks<GameAssetHouse> titanicHouses = new Decks<GameAssetHouse>(0, 0, "Need Deck image");
	private Decks<GameAssetAttraction> uniAttractions = new Decks<GameAssetAttraction>(0, 0, "Need Deck imag");
	private Decks<GameAssetAttraction> fallsAttractions = new Decks<GameAssetAttraction>(0, 0, "Need Deck imag");
	private Decks<GameAssetAttraction> cathedralAttractions = new Decks<GameAssetAttraction>(0, 0, "Need Deck imag");
	private Decks<GameAssetAttraction> titanicAttractions = new Decks<GameAssetAttraction>(0, 0, "Need Deck imag");
	
	public GameBoard(ArrayList<GamePlayer> players)
	{
		prepareGUI();
		
		try
	    {
	    	this.logo = ImageIO.read(getClass().getResource("gameoflifequblogosml.png"));
	    }
	    catch (IOException e) 
	    {
	        System.out.println(e.toString());
	        e.printStackTrace();
	    }
		
		mainGameBoardTiles = new MainGameBoardTiles();
		
		gameLogic = new GameLogic(players, this, null);
		gameTurnTimer = new GameTurnTimer(gameLogic);
		spinner = new GameSpinner(100, 100, gameLogic);

	}
	
	public void prepareGUI()
	{
		mainFrame = new Frame("QUB Life Game");
		mainFrame.setIgnoreRepaint(true);
		mainFrame.addWindowListener(new WindowListener() {
			
			@Override
			public void windowOpened(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowIconified(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowDeiconified(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowDeactivated(WindowEvent e) {
				// TODO Auto-generated method stub
			}
			
			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowClosed(WindowEvent e) {
				// TODO Auto-generated method stub
				mainFrame.dispose();
			}
			
			@Override
			public void windowActivated(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		controlPanel = new Panel();
		controlPanel.setBackground(new Color(232,181,30));
	
	    mainFrame.add(controlPanel);
	    mainFrame.setExtendedState(Frame.MAXIMIZED_BOTH); 
	    mainFrame.setVisible(true);  
	    mainFrame.setResizable(false);
	    
	    mainFrame.setMenuBar(setupMenuBarExceptSave(mainFrame, null, this));
	    mainFrame.getMenuBar().setFont(new Font("Arial", Font.BOLD, 14));
	}
	
	public void showCanvasDemo()
	{
		gameCanvas = new GameCanvas(this);
	    controlPanel.add(gameCanvas); 
	    gameTurnTimer.beginTurnTiming();
    } 
	
	public void updateGameBoard()
	{
		gameCanvas.repaint();
	}
	
	public Frame getMainFrame() {
		return mainFrame;
	}

	public void setMainFrame(Frame mainFrame) {
		this.mainFrame = mainFrame;
	}

	public Label getHeaderLabel() {
		return headerLabel;
	}

	public void setHeaderLabel(Label headerLabel) {
		this.headerLabel = headerLabel;
	}

	public Label getStatusLabel() {
		return statusLabel;
	}

	public void setStatusLabel(Label statusLabel) {
		this.statusLabel = statusLabel;
	}

	public Panel getControlPanel() {
		return controlPanel;
	}

	public void setControlPanel(Panel controlPanel) {
		this.controlPanel = controlPanel;
	}

	public GameCanvas getGameCanvas() {
		return gameCanvas;
	}

	public void setGameCanvas(GameCanvas gameCanvas) {
		this.gameCanvas = gameCanvas;
	}
	
	public GameLogic getGameLogic() {
		return gameLogic;
	}

	public void setGameLogic(GameLogic gameLogic) {
		this.gameLogic = gameLogic;
	}

	public GameTurnTimer getGameTurnTimer() {
		return gameTurnTimer;
	}

	public void setGameTurnTimer(GameTurnTimer gameTurnTimer) {
		this.gameTurnTimer = gameTurnTimer;
	}

	public BufferedImage getLogo() {
		return logo;
	}

	public void setLogo(BufferedImage logo) {
		this.logo = logo;
	}

	public boolean isSavedGame() {
		return isSavedGame;
	}

	public void setSavedGame(boolean isSavedGame) {
		this.isSavedGame = isSavedGame;
	}

	public Decks<Careers> getUniCareers() {
		return uniCareers;
	}

	public void setUniCareers(Decks<Careers> uniCareers) {
		this.uniCareers = uniCareers;
	}

	public Decks<Careers> getCareers() {
		return careers;
	}

	public void setCareers(Decks<Careers> careers) {
		this.careers = careers;
	}

	public Decks<GameAssetHouse> getUniHouses() {
		return uniHouses;
	}

	public void setUniHouses(Decks<GameAssetHouse> uniHouses) {
		this.uniHouses = uniHouses;
	}

	public Decks<GameAssetHouse> getFallsHouses() {
		return fallsHouses;
	}

	public void setFallsHouses(Decks<GameAssetHouse> fallsHouses) {
		this.fallsHouses = fallsHouses;
	}

	public Decks<GameAssetHouse> getCathedralHouses() {
		return cathedralHouses;
	}

	public void setCathedralHouses(Decks<GameAssetHouse> cathedralHouses) {
		this.cathedralHouses = cathedralHouses;
	}

	public Decks<GameAssetHouse> getTitanicHouses() {
		return titanicHouses;
	}

	public void setTitanicHouses(Decks<GameAssetHouse> titanicHouses) {
		this.titanicHouses = titanicHouses;
	}

	public Decks<GameAssetAttraction> getUniAttractions() {
		return uniAttractions;
	}

	public void setUniAttractions(Decks<GameAssetAttraction> uniAttractions) {
		this.uniAttractions = uniAttractions;
	}

	public Decks<GameAssetAttraction> getFallsAttractions() {
		return fallsAttractions;
	}

	public void setFallsAttractions(Decks<GameAssetAttraction> fallsAttractions) {
		this.fallsAttractions = fallsAttractions;
	}

	public Decks<GameAssetAttraction> getCathedralAttractions() {
		return cathedralAttractions;
	}

	public void setCathedralAttractions(Decks<GameAssetAttraction> cathedralAttractions) {
		this.cathedralAttractions = cathedralAttractions;
	}

	public Decks<GameAssetAttraction> getTitanicAttractions() {
		return titanicAttractions;
	}

	public void setTitanicAttractions(Decks<GameAssetAttraction> titanicAttractions) {
		this.titanicAttractions = titanicAttractions;
	}

	public MainGameBoardTiles getMainGameBoardTiles() {
		return mainGameBoardTiles;
	}

	public void setMainGameBoardTiles(MainGameBoardTiles mainGameBoardTiles) {
		this.mainGameBoardTiles = mainGameBoardTiles;
	}

	public GameSpinner getSpinner() {
		return spinner;
	}

	public void setSpinner(GameSpinner spinner) {
		this.spinner = spinner;
	}

class GameCanvas extends Canvas {
	
	private GameBoard board;
	private Graphics2D g2;
	private boolean initialPaint;
	private Rectangle gameCanvasBounds;

      public GameCanvas(GameBoard board) 
      {
    	  this.initialPaint = true;
    	  this.board = board;
    	  // 232,181,30
          setBackground(new Color(232,181,30));
          setSize(board.getMainFrame().getWidth(), board.getMainFrame().getHeight());
          setUpMouseClickListeners();
      }

      public void paint(Graphics g) 
      {
         g2 = (Graphics2D) g;
         g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
         
         if(initialPaint)
         {
        	gameCanvasBounds = g2.getDeviceConfiguration().getBounds();
        	// System.out.println(gameCanvasBounds.getWidth() + " | " + gameCanvasBounds.getHeight());
       	  	spinner.setxCoord((gameCanvasBounds.width / 2) - (spinner.getEntityImage().getWidth() / 2));
       	  	spinner.setyCoord((gameCanvasBounds.height / 2) - (spinner.getEntityImage().getHeight() / 2));
       	  	
       	  	mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().setxCoord(spinner.getxCoord() - 32 - mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().getEntityImage().getWidth());
       	  	mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().setyCoord(spinner.getyCoord() - 32 - mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().getEntityImage().getHeight());
       	  	
       	  	if(isSavedGame)
       	  	{
	       	  	for (GamePlayer player : gameLogic.getPlayers()) 
	       	  	{
					player.getCurrentTileNode().getTile().movePlayerCoordsToTile(player);
				}
       	  	}
       	  	else
       	  	{
	       	  	for (GamePlayer player : gameLogic.getPlayers()) 
	       	  	{
					player.setCurrentTileNode(mainGameBoardTiles.getGameBoardTileList().getHeadTileNode());
					mainGameBoardTiles.getGameBoardTileList().getHeadTileNode().getTile().setPlayerOnTile(player);
				}
       	  	}
       	  	
       	  	
       	  	mainGameBoardTiles.buildListsAfterSetup();
       	
       	  	initialPaint = false;
         }
         
         drawLists(g2);
         drawLogo(g2);
         drawPlayerStats(g2);
         
         if(spinner.isSpinning())
         {
        	 drawPlayers(g2);
        	 spinner.drawEntity(g2);
         }
         else
         {
        	 spinner.drawEntity(g2);
        	 drawPlayers(g2);
         }
      }
      
      public void drawLogo(Graphics2D graphicsPanel)
      {
    	  graphicsPanel.drawImage(logo, (gameCanvasBounds.width / 2) - (logo.getWidth() / 2), 5, null);
      }
      
      public void drawPlayers(Graphics2D graphicsPanel)
      {
    	  for (GamePlayer player : gameLogic.getPlayers()) 
    	  {
    		  if(player.isInGame())
    		  {
    			  player.drawEntity(graphicsPanel);
    		  }
    	  }
      }
      
      public void drawLists(Graphics2D graphicsPanel)
      {
    	  mainGameBoardTiles.getGameBoardTileList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getFallsRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getTitanicRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getCathedralRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getUniRoadList().drawList(graphicsPanel);
    	  mainGameBoardTiles.getQubList().drawList(graphicsPanel);
      }
      
      public void drawPlayerStats(Graphics2D graphicsPanel)
      {
    	  int yCoord = 50; 
    	  
    	  for (GamePlayer player : gameLogic.getPlayersRanked()) 
    	  {
    		  player.drawPlayerStats(graphicsPanel, 50, yCoord);
    		  yCoord += graphicsPanel.getFontMetrics().getHeight() * 5 + 20;
    	  }
      }
      
      public void setUpMouseClickListeners()
      {
    	  this.addMouseListener(new MouseListener() {
   			
   			@Override
   			public void mouseReleased(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mousePressed(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseExited(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseEntered(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseClicked(MouseEvent e) {
   				// TODO Auto-generated method stub
   				gameLogic.mouseClickedLogic(e.getX(), e.getY(), GameBoard.this);
   			}
   		 });  
      }
      
      public Graphics2D getG2()
      {
    	  return g2;
      }
   }
}