package gameOfLife;

/**
 * @author Robert Kordula 40131366
 * ChildPeg extends FamilyPegs so all three kinds of pegs can be kept in one list, ChildPeg deals with its own
 * movement related to the player its tied to
 */
public class ChildPeg extends FamilyPegs {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2564127687016884808L;
	// True is male, false is female//
	private boolean gender;

	public ChildPeg(int xCoord, int yCoord, boolean gender) {
		super(xCoord, yCoord, "");
		this.setGender(gender);
		String imageName;
		if (gender) {
			imageName = "resizedimages/token_Male.png";
		} else {
			imageName = "resizedimages/token_Female.png";
		}

		setEntityImageByName(imageName);

	}

	@Override
	/**
	 * @param player
	 * @param position
	 * Takes in the player the peg is tied to and with the passed in position determines where it should be in relation to the 
	 * player when moving
	 */
	public void movePegToPlayer(GamePlayer player, int position) {
		int XDifference = 0;
		int YDifference = 0;
		if (position == 1)
		{
			XDifference = getEntityImage().getWidth() + 2;
			YDifference = 0;
		}
		else if (position == 2)
		{
			XDifference = getEntityImage().getWidth() + 2;
			YDifference = player.getEntityImage().getHeight() - getEntityImage().getHeight() + 20;
		}
		this.setxCoord(player.getxCoord() - XDifference);
		this.setyCoord(player.getyCoord() + YDifference);
	}

	//Getters and setters//
	public boolean isGender() {
		return gender;
	}

	public void setGender(boolean gender) {
		this.gender = gender;
	}
}
