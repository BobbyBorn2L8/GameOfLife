package gameOfLife;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

public class GameSpinner extends GameEntity{
	
	private Random rand;
	private GameLogic gameLogic;
	private Timer timer;
	private int spinnerTime, degrees;
	private BufferedImage originalImage;
	private int result;
	private boolean spinning, canSpin;
	
	public GameSpinner(int xCoord, int yCoord, GameLogic gameLogic)
	{
		super(xCoord, yCoord, "rsz_spinner_image.png");
		this.gameLogic = gameLogic;
		this.rand = new Random();
		this.originalImage = getEntityImage();
		this.canSpin = false;
		this.timer = new Timer();
		this.spinnerTime = 10;
		this.degrees = 0;
		this.result = 0;
	}
	
	@Override
	public void drawEntity(Graphics2D graphicsPanel)
	{
		super.drawEntity(graphicsPanel);
		
		if(!spinning)
		{
			graphicsPanel.setFont(new Font("Arial", Font.BOLD, 80));
			graphicsPanel.setColor(Color.WHITE);
			int nameWidth = graphicsPanel.getFontMetrics().stringWidth(Integer.toString(result));
			int nameHeight = graphicsPanel.getFontMetrics().getHeight();
			
			graphicsPanel.drawString(Integer.toString(result), getxCoord() + (getEntityImage().getWidth() / 2) - (nameWidth / 2), 
					getyCoord() + (getEntityImage().getHeight() / 2) + (nameHeight / 4));
		}
	}
	
	public void rotateSpinner(Graphics2D graphicsPanel)
	{
		spinning = true;
		
		timer.schedule(new TimerTask() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				setEntityImage(originalImage);
				degrees += 18;
				animateSpinnerRotation(gameLogic.getBoard().getGameCanvas().getG2(), degrees);
				spinnerTime += 10;
				gameLogic.getBoard().updateGameBoard();
				
				if(degrees == 720)
				{
					this.cancel();
					spinnerTime = 10;
					degrees = 0;
					result = spinGameSpinner(false);
					spinning = false;
					gameLogic.getBoard().updateGameBoard();
				}
				else
				{
					rotateSpinner(graphicsPanel);
				}
			}
		}, spinnerTime);
	}

	public void animateSpinnerRotation(Graphics2D graphicsPanel, int degrees)
	{
		AffineTransform at = new AffineTransform();
		at.rotate(Math.toRadians(degrees), 75, 75);
		
		AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC );
		this.setEntityImage(op.filter(this.getEntityImage(), null));
	}
	
	
	public int spinGameSpinner(boolean playerMoving)
	{
		int spinResult = rand.nextInt(10) + 1;
		
		if (playerMoving)
		{	
			// TODO: Rachael is to add the calling for the randomiseHousingMarketValue method based on the spinResult value
			
			if(spinResult == 10)
			{
				gameLogic.getCurrentPlayer().setPlayerAge(gameLogic.getCurrentPlayer().getPlayerAge() + 10);
			}
			else if(spinResult == 1)
			{
				randomiseStockMarketMultiplier();
			}
			
		}
		
		return spinResult;
	}
	
	public void randomiseStockMarketMultiplier()
	{
		gameLogic.adjustStockMarketValue(rand.nextDouble() + 0.5);
	}
	
	public void randomiseHousingMarketMultiplier()
	{
		// TODO: Rachael is to call the adjustHousingMarketValue method from the gameLogic, similar to how the method above works
	}
}
