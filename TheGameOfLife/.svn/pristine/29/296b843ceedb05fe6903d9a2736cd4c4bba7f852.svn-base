package gameOfLife;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JOptionPane;

public class GameLogic implements Serializable{
	
	private GamePlayer currentPlayer;
	transient private GameBoard board;
	private ArrayList<GamePlayer> players;
	private ArrayList<GamePlayer> playersRanked;
	private ArrayList<GameAssetHouse> allHouses = new ArrayList<GameAssetHouse>(); 
	private ArrayList<GameAssetAttraction> allAttractions = new ArrayList<GameAssetAttraction>();
	private int currentIndex;
	private int retirementAge;
	private double currentStockMarketMultiplier;
	private double currentHousingMarketMultiplier;
	private GameEventsLog gameLog;
	private boolean gameOver, isSavedGame;
	private GameBoardEndTurnButton gameBoardEndTurnButton;

	public GameLogic(ArrayList<GamePlayer> players, GameBoard board)
	{
		this.board = board;
		this.players = players;
		this.playersRanked = players;
		this.currentIndex = 0;
		this.currentPlayer = players.get(0);
		this.currentHousingMarketMultiplier = 1.0;
		this.currentStockMarketMultiplier = 1.0;
		this.gameLog = new GameEventsLog();
		this.gameOver = false;
		this.isSavedGame = false;
		gameBoardEndTurnButton = new GameBoardEndTurnButton(0, 0, "", this);
		setRanks();
		populateHouseDecks();
		populateAttractions();
	}
	
	public void startGameOnFirstPlayer()
	{
		if(currentPlayer.isFirstTurn())
		{
			currentPlayer.setPlayerBankBalance(10000);
			playerChoiceWorkVSQueens(currentPlayer);
		}
	}
	
	public void mouseClickedLogic(int xCoord, int yCoord, GameBoard board)
	{
		GameSound.clickSound.play();
		if(gameOver)
		{
			return;
		}
		
		if(board.getSpinner().entityTouched(xCoord, yCoord) && currentPlayer.isCanSpin())
		{
			board.getSpinner().rotateSpinner(board.getGameCanvas().getG2());
		}
		else if(board.getSpinner().entityTouched(xCoord, yCoord) && !currentPlayer.isCanSpin())
		{
			JOptionPane.showMessageDialog(board.getMainFrame(), "ERROR: You cannot currently use the game spinner", "ERROR", JOptionPane.ERROR_MESSAGE, null);
		}
		else if(board.getOpenWallet().entityTouched(xCoord, yCoord))
		{
			board.getOpenWallet().buttonPressedEffect(this);
		}
		else if(gameBoardEndTurnButton.entityTouched(xCoord, yCoord))
		{
			gameBoardEndTurnButton.buttonPressedEffect();
		}
		else
		{
			for (GamePlayer player : players) 
			{
				if(player.getRetireEarlyButton().entityTouched(xCoord, yCoord))
				{
					player.getRetireEarlyButton().buttonPressedEffect(this);
					if(!gameOver)
					{
						moveTurnToNextPlayer();
					}
					break;
				}
			}
		}
	}
	
	public void playerChoiceWorkVSQueens(GamePlayer player)
	{
		Object[] options = { "Go To Work", "Go To Queens" };
		int choice = JOptionPane.showOptionDialog(null, player.getPlayerName() + ": Please select your initial choice!", player.getPlayerName() + ": Please Make A Choice",
		             JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
		             null, options, options[0]);
		
		Careers career;
		if(choice == 0)
		{
			player.setUniversityImmediately(false);
			/*
			player.setCurrentTileNode(board.getMainGameBoardTiles().getGameBoardTileList().getHeadTileNode().getNextTileNode());
			player.getCurrentTileNode().getTile().movePlayerCoordsToTile(player);
			*/
			board.updateGameBoard();
			do
			{
				career = board.getCareers().drawThreeForDecision();
			}while (career == null);
			player.setPlayerCareer(career);
			player.setFirstTurn(false);
		}
		else if(choice == 1)
		{
			player.setUniversityImmediately(true);
			player.setCurrentTileNode(board.getMainGameBoardTiles().getUniHeadNode());
			player.getCurrentTileNode().getTile().movePlayerCoordsToTile(player);
			board.updateGameBoard();
			player.setFirstTurn(false);
		}
		else
		{
			playerChoiceWorkVSQueens(player);
		}
		board.updateGameBoard();
	}
	
	public boolean playerMustRetire(GamePlayer player)
	{
		return player.getPlayerAge() >= retirementAge;
	}
	
	public void checkPlayerAge(GamePlayer player)
	{
		if(playerMustRetire(player))
		{
			player.setInGame(false);
			player.setCurrentTileNode(null);
		}
		
		board.updateGameBoard();
		
		if(checkAllPlayersRetired())
		{
			endGame();
		}
	}
	
	public void endGame()
	{
		this.gameOver = true;
		endGameTotalAllPlayers();
		new GameOverScreen(getPlayersRanked(), board);
	}
	
	public boolean checkAllPlayersRetired()
	{
		for (GamePlayer player : players) 
		{
			if(player.isInGame())
			{
				return false;
			}
		}
		
		return true;
	}
	
	public void moveTurnToNextPlayer()
	{
		if(currentIndex == players.size() - 1)
		{
			currentIndex = 0;
		}
		currentIndex++;
		currentPlayer = players.get(currentIndex);
		
		if(!currentPlayer.isInGame())
		{
			moveTurnToNextPlayer();
		}
		else
		{
			currentPlayer.setCanSpin(true);
			board.updateGameBoard();
			Object[] options = {"OK"};
		    JOptionPane.showOptionDialog(getBoard().getMainFrame(),  "It is now " + currentPlayer.getPlayerName() + "'s turn!", "Turn Change!", JOptionPane.PLAIN_MESSAGE, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
			
			if(currentPlayer.isFirstTurn())
			{
				currentPlayer.setPlayerBankBalance(10000);
				playerChoiceWorkVSQueens(currentPlayer);
			}
			
		}		
	}
	
	public void sortRankedPlayers() // sort descending
	{
		for(int limit = playersRanked.size() - 1; limit > 0; limit--)
		{
			for(int i = 0; i < limit; i++)
			{				
				if(playersRanked.get(i).compareTo(playersRanked.get(i+1)) < 0) // i.e the player is 'lesser' than the player after it
				{
					swapElements(i);
				}
			}
		}
		
		setRanks();
		
	}
	
	private void setRanks()
	{
		for (int i  = 0; i < playersRanked.size(); i++)
		{
			playersRanked.get(i).setCurrentRanking(i + 1);
		}
	}
	
	public void printRankedPlayers()
	{
		for (GamePlayer gamePlayer : players) 
		{
			System.out.println(gamePlayer.getCurrentRanking() + " | " + gamePlayer.getPlayerName() );
		}
		
		System.out.println();
	}
	
	private void swapElements(int lowerIndex)
	{
		GamePlayer intermediateObject = playersRanked.get(lowerIndex);
		playersRanked.set(lowerIndex, playersRanked.get(lowerIndex + 1));
		playersRanked.set(lowerIndex + 1, intermediateObject);
	}
	
	public void populateHouseDecks()
	{
		GameAssetHouse fallsHouse1 = new GameAssetHouse("Small Detached House", District.Falls, 10000, "resizedimages/Card_House/card_House03.png");
		allHouses.add(fallsHouse1);
		GameAssetHouse fallsHouse2 = new GameAssetHouse("Medium Detached House", District.Falls, 15000, "resizedimages/Card_House/card_House04.png");
		allHouses.add(fallsHouse2);
		GameAssetHouse fallsHouse3 = new GameAssetHouse("Large Detached House", District.Falls, 17500, "resizedimages/Card_House/card_House05.png");
		allHouses.add(fallsHouse3);
		
		GameAssetHouse uniHouse1 = new GameAssetHouse("Standard Box", District.University, 8000, "resizedimages/Card_House/card_House01.png");
		allHouses.add(uniHouse1);
		GameAssetHouse uniHouse2 = new GameAssetHouse("Large Box", District.University, 9000, "resizedimages/Card_House/card_House02.png");
		allHouses.add(uniHouse2);
		GameAssetHouse uniHouse3 = new GameAssetHouse("Standard Student House", District.University, 5000, "resizedimages/Card_House/card_House12.png");
		allHouses.add(uniHouse3);
		GameAssetHouse uniHouse4 = new GameAssetHouse("Large Student House", District.University, 10000, "resizedimages/Card_House/card_House13.png");
		allHouses.add(uniHouse4);
		
		GameAssetHouse cathedralHouse1 = new GameAssetHouse("Luxury City Apartment", District.Cathedral, 60000, "resizedimages/Card_House/card_House09.png");
		allHouses.add(cathedralHouse1);
		GameAssetHouse cathedralHouse2 = new GameAssetHouse("Penthouse City Apartment", District.Cathedral, 100000, "resizedimages/Card_House/card_House10.png");
		allHouses.add(cathedralHouse2);
		GameAssetHouse cathedralHouse3 = new GameAssetHouse("City Mansion", District.Cathedral, 150000, "resizedimages/Card_House/card_House11.png");
		allHouses.add(cathedralHouse3);

		GameAssetHouse titanicHouse1 = new GameAssetHouse("Standard Apartment", District.Titanic, 85000, "resizedimages/Card_House/card_House06.png");
		allHouses.add(titanicHouse1);
		GameAssetHouse titanicHouse2 = new GameAssetHouse("Luxury Apartment", District.Titanic, 29500, "resizedimages/Card_House/card_House07.png");
		allHouses.add(titanicHouse2);
		GameAssetHouse titanicHouse3 = new GameAssetHouse("Titanic Apartment", District.Titanic, 40000, "resizedimages/Card_House/card_House08.png");
		allHouses.add(titanicHouse3);
	}
	
	public void populateAttractions()
	{
		GameAssetAttraction attraction1 = new GameAssetAttraction(50, 100, "Frisbee", "resizedimages/Card_Souvineers/card_Sou01.png");
		allAttractions.add(attraction1);
		GameAssetAttraction attraction2 = new GameAssetAttraction(100, 150, "Ticket Stub", "resizedimages/Card_Souvineers/card_Sou02.png");
		allAttractions.add(attraction2);
		GameAssetAttraction attraction3 = new GameAssetAttraction(150, 200, "Candle", "resizedimages/Card_Souvineers/card_Sou03.png");
		allAttractions.add(attraction3);
		GameAssetAttraction attraction4 = new GameAssetAttraction(100, 200, "Flim Ticket", "resizedimages/Card_Souvineers/card_Sou04.png");
		allAttractions.add(attraction4);
		GameAssetAttraction attraction5 = new GameAssetAttraction(150, 250, "Selfie at Lanyon & QUB Hoodie", "resizedimages/Card_Souvineers/card_Sou05.png");
		allAttractions.add(attraction5);
		GameAssetAttraction attraction6 = new GameAssetAttraction(200, 300, "Tenants Vital Festival Gear", "resizedimages/Card_Souvineers/card_Sou06.png");
		allAttractions.add(attraction6);
		GameAssetAttraction attraction7 = new GameAssetAttraction(150, 350, "Selfie with Big Fish", "resizedimages/Card_Souvineers/card_Sou07.png");
		allAttractions.add(attraction7);
		GameAssetAttraction attraction8 = new GameAssetAttraction(200, 400, "Replica Painting", "resizedimages/Card_Souvineers/card_Sou08.png");
		allAttractions.add(attraction8);
		GameAssetAttraction attraction9 = new GameAssetAttraction(250, 450, "Crate of Local Beer", "resizedimages/Card_Souvineers/card_Sou09.png");
		allAttractions.add(attraction9);
		GameAssetAttraction attraction10 = new GameAssetAttraction(200, 500, "Replica Titanic Boat", "resizedimages/Card_Souvineers/card_Sou10.png");
		allAttractions.add(attraction10);
		GameAssetAttraction attraction11 = new GameAssetAttraction(250, 550, "Titanic: Studios Game of Thrones Merch", "resizedimages/Card_Souvineers/card_Sou11.png");
		allAttractions.add(attraction11);
		GameAssetAttraction attraction12 = new GameAssetAttraction(300, 600, "Titanic: SSE Arena Concert Tickets & VIP", "resizedimages/Card_Souvineers/card_Sou12.png");
		allAttractions.add(attraction12);
	}
	
	public void applyHousingMarketMultiplierToHouses()
	{
		for (GameAssetHouse gameAssetHouse : allHouses) 
		{
			gameAssetHouse.setCurrentAssetValue(currentHousingMarketMultiplier);
		}
	}
	
	public void applyStockMarketMultiplierToAttractions()
	{
		for (GameAssetAttraction gameAssetAttraction: allAttractions)
		{
			gameAssetAttraction.setCurrentAssetValue(currentStockMarketMultiplier);
		}
	}
	
	/**Loops through totalling all the players assets values
	 * @author Robert Kordula 40131366
	 */
	public void endGameTotalAllPlayers()
	{
		//double[] playerScores = new double[players.size()];
		//int highestPlayer = 0;
		for (int iii = 0; iii < players.size(); iii++)
		{
			if(players.get(iii).isInGame())
			{
				endGameTotalForPlayer(players.get(iii));
			}
		}
	}
	
	/**Totals the current players assets 
	 * @author Robert Kordula 40131366
	 * @param player
	 * @return total value of player assets
	 */
	public double endGameTotalForPlayer(GamePlayer player)
	{
		double playerMoney = player.getPlayerBankBalance();
		double assetsValue = 0;
		double houseValue = 0;
		
		if(player.getCurrentHouse() != null)
		{
			houseValue = player.getCurrentHouse().getCurrentAssetValue();
		}
 
		double carValue = 1000;
		double familyValue = 0;
		
		for (Iterator<Loan> iterator = player.getPlayerLoans().iterator(); iterator.hasNext();)
		{
			assetsValue -= iterator.next().getLoanAmount() * 2;
		}
		for (Iterator<GameAsset> iterator = player.getPlayerAssets().iterator(); iterator.hasNext();)
		{
			assetsValue += iterator.next().getCurrentAssetValue() * getCurrentStockMarketMultiplier();
		}
		for (Iterator<FamilyPegs> iterator = player.getPlayerFamily().iterator(); iterator.hasNext();)
		{
			if (iterator.next() instanceof SpousePeg)
			{
				familyValue += 2000;
			}
			else if (iterator.next() instanceof ChildPeg)
			{
				familyValue += 1000;
			}
			else
			{
				familyValue += 500;
			}
		}
		switch (player.getPlayerCar().getPlayerCar())
		{
			case TIER2:
				carValue = 4000;
				break;
			case TIER3:
				carValue = 6000;
				break;
			case TIER4:
				carValue = 8000;
				break;
			default:
				carValue = 2000;
				break;
		}
		
		double finalValue = playerMoney + assetsValue + houseValue + carValue + familyValue;
		player.setPlayerBankBalance((int)finalValue);
		return finalValue;
	}
	
	public GamePlayer getCurrentPlayer() {
		return currentPlayer;
	}

	public void setCurrentPlayer(GamePlayer currentPlayer) {
		this.currentPlayer = currentPlayer;
	}

	public ArrayList<GamePlayer> getPlayers() {
		return players;
	}

	public void setPlayers(ArrayList<GamePlayer> players) {
		this.players = players;
	}

	public int getCurrentIndex() {
		return currentIndex;
	}

	public void setCurrentIndex(int currentIndex) {
		this.currentIndex = currentIndex;
	}

	public int getRetirementAge() {
		return retirementAge;
	}

	public void setRetirementAge(int retirementAge) {
		this.retirementAge = retirementAge;
	}

	public GameBoard getBoard() {
		return board;
	}

	public void setBoard(GameBoard board) {
		this.board = board;
	}

	public double getCurrentStockMarketMultiplier() {
		return currentStockMarketMultiplier;
	}

	public void setCurrentStockMarketMultiplier(double currentStockMarketMultiplier) {
		this.currentStockMarketMultiplier = currentStockMarketMultiplier;
	}

	public double getCurrentHousingMarketMultiplier() {
		return currentHousingMarketMultiplier;
	}

	public void setCurrentHousingMarketMultiplier(double currentHousingMarketMultiplier) {
		this.currentHousingMarketMultiplier = currentHousingMarketMultiplier;
		applyHousingMarketMultiplierToHouses();
	}

	public ArrayList<GamePlayer> getPlayersRanked() {
		sortRankedPlayers();
		return playersRanked;
	}

	public void setPlayersRanked(ArrayList<GamePlayer> playersRanked) {
		this.playersRanked = playersRanked;
	}

	public GameEventsLog getGameLog() {
		return gameLog;
	}

	public void setGameLog(GameEventsLog gameLog) {
		this.gameLog = gameLog;
	}

	public boolean isGameOver() {
		return gameOver;
	}

	public void setGameOver(boolean gameOver) {
		this.gameOver = gameOver;
	}

	public boolean isSavedGame() {
		return isSavedGame;
	}

	public void setSavedGame(boolean isSavedGame) {
		this.isSavedGame = isSavedGame;
	}

	public GameBoardEndTurnButton getGameBoardEndTurnButton() {
		return gameBoardEndTurnButton;
	}

	public void setGameBoardEndTurnButton(GameBoardEndTurnButton gameBoardEndTurnButton) {
		this.gameBoardEndTurnButton = gameBoardEndTurnButton;
	}

	public ArrayList<GameAssetHouse> getAllHouses() {
		return allHouses;
	}

	public void setAllHouses(ArrayList<GameAssetHouse> allHouses) {
		this.allHouses = allHouses;
	}

	public ArrayList<GameAssetAttraction> getAllAttractions() {
		return allAttractions;
	}

	public void setAllAttractions(ArrayList<GameAssetAttraction> allAttractions) {
		this.allAttractions = allAttractions;
	}
	
	
	
	
}