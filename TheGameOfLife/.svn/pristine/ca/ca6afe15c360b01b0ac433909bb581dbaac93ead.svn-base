package gameOfLife;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;

public class GameBoard extends CommonScreenAttributes{
	
	private Frame mainFrame;
	private Label headerLabel, statusLabel;
	private Panel controlPanel;
	private GameBoardTileList gameBoardTileList;
	private GameCanvas gameCanvas;
	
	// Testing variables
	TileNode tailNode, middleNode, headNode, testNode1, testNode2, testNode3, testNode4, testNode5, testNode6, testNode7, testNode8, testNode9
	, testNode10, testNode11, testNode12, testNode13, testNode14, testNode15;
	GamePlayer player;
	GameSpinner spinner;
	
	public static void main(String[] args)
	{
		//GameSound test = new GameSound("spinnersound.wav");
		// test.playOrResumeSound();
		
		GameBoard awtControlDemo = new GameBoard();
		awtControlDemo.showCanvasDemo();
    }

	public GameBoard()
	{
		prepareGUI();
		
		gameBoardTileList = new GameBoardTileList();
		
		tailNode = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		middleNode = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		headNode = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode1 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode2 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode3 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode4 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode5 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode6 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode7 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode8 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode9 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode10 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode11 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode12 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode13 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode14 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		testNode15 = new TileNode(new OrangeTile(0, 0, "orange_01_75.png", 0, "title", null), null);
		
		gameBoardTileList.addNode(headNode, 'r');
		// gameBoardTileList.addNode(middleNode, 'r' );
		// gameBoardTileList.addNode(tailNode, 'r');
		
		player = new GamePlayer(500, 500, "Bobby", true);
		
		ArrayList<GamePlayer> players = new ArrayList<>();
		players.add(player);
		
		GameLogic gameLogic = new GameLogic(players, this);
		GameTurnTimer timer = new GameTurnTimer(gameLogic);
		timer.beginTurnTiming();
		
		spinner = new GameSpinner(100, 100, gameLogic);
	}
	
	public void prepareGUI()
	{
		mainFrame = new Frame("Testing AWT + Canvas");
		mainFrame.setSize(1280, 720);
		mainFrame.addWindowListener(new WindowListener() {
			
			@Override
			public void windowOpened(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowIconified(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowDeiconified(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void windowDeactivated(WindowEvent e) {
				// TODO Auto-generated method stub
			}
			
			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				System.exit(0);
			}
			
			@Override
			public void windowClosed(WindowEvent e) {
				// TODO Auto-generated method stub
				System.exit(0);
			}
			
			@Override
			public void windowActivated(WindowEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		controlPanel = new Panel();
	
	    mainFrame.add(controlPanel);
	    mainFrame.setExtendedState(Frame.MAXIMIZED_BOTH); 
	    mainFrame.setVisible(true);  
	    mainFrame.setResizable(false);
	}
	
	private void showCanvasDemo()
	{
		gameCanvas = new GameCanvas(this);
	    controlPanel.add(gameCanvas); 
    } 
	
	public void updateGameBoard()
	{
		gameCanvas.repaint();
	}
	

	public Frame getMainFrame() {
		return mainFrame;
	}

	public void setMainFrame(Frame mainFrame) {
		this.mainFrame = mainFrame;
	}

	public Label getHeaderLabel() {
		return headerLabel;
	}

	public void setHeaderLabel(Label headerLabel) {
		this.headerLabel = headerLabel;
	}

	public Label getStatusLabel() {
		return statusLabel;
	}

	public void setStatusLabel(Label statusLabel) {
		this.statusLabel = statusLabel;
	}

	public Panel getControlPanel() {
		return controlPanel;
	}

	public void setControlPanel(Panel controlPanel) {
		this.controlPanel = controlPanel;
	}

	public GameCanvas getGameCanvas() {
		return gameCanvas;
	}

	public void setGameCanvas(GameCanvas gameCanvas) {
		this.gameCanvas = gameCanvas;
	}

class GameCanvas extends Canvas {
	
	private GameBoard board;
	private Graphics2D g2;
	private boolean initialPaint;
	private Rectangle gameCanvasBounds;

      public GameCanvas(GameBoard board) 
      {
    	  this.initialPaint = true;
    	  this.board = board;
          setBackground (Color.lightGray);
          setSize(board.getMainFrame().getWidth(), board.getMainFrame().getHeight());
          setUpMouseClickListeners();
      }

      public void paint(Graphics g) 
      {
         g2 = (Graphics2D) g;
         g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
         
         if(initialPaint)
         {
        	gameCanvasBounds = g2.getDeviceConfiguration().getBounds();
       	  	spinner.setxCoord((gameCanvasBounds.width / 2) - (spinner.getEntityImage().getWidth() / 2));
       	  	spinner.setyCoord((gameCanvasBounds.height / 2) - (spinner.getEntityImage().getHeight() / 2));
       	  	
       	  	headNode.getTile().setxCoord(spinner.getxCoord() - 32 - headNode.getTile().getEntityImage().getWidth());
       	  	headNode.getTile().setyCoord(spinner.getyCoord() - 32 - headNode.getTile().getEntityImage().getHeight());
       	  	
       	  	player.setCurrentTileNode(headNode);
       	  	headNode.getTile().setPlayerOnTile(player);
       	  	
    		gameBoardTileList.addNode(middleNode, 'r' );
    		gameBoardTileList.addNode(tailNode, 'r');
    		gameBoardTileList.addNode(testNode1, 'r');
    		gameBoardTileList.addNode(testNode2, 'r');
    		gameBoardTileList.addNode(testNode3, 'd');
    		gameBoardTileList.addNode(testNode4, 'd');
    		gameBoardTileList.addNode(testNode5, 'd');
    		gameBoardTileList.addNode(testNode6, 'd');
    		gameBoardTileList.addNode(testNode7, 'l');
    		gameBoardTileList.addNode(testNode8, 'l');
    		gameBoardTileList.addNode(testNode9, 'l');
    		gameBoardTileList.addNode(testNode10, 'l');
    		gameBoardTileList.addNode(testNode11, 'u');
    		gameBoardTileList.addNode(testNode12, 'u');
    		gameBoardTileList.addNode(testNode13, 'u');
    		gameBoardTileList.addNode(testNode14, 'u');
    		
       	  	initialPaint = false;
         }

         board.gameBoardTileList.drawList(g2);
         board.player.drawEntity(g2);
         
         if(spinner.isSpinning())
         {
        	 board.player.drawEntity(g2);
        	 spinner.drawEntity(g2);
         }
         else
         {
        	 spinner.drawEntity(g2);
        	 board.player.drawEntity(g2);
         }
         
      }
      
      public void setUpMouseClickListeners()
      {
    	  this.addMouseListener(new MouseListener() {
   			
   			@Override
   			public void mouseReleased(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mousePressed(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseExited(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseEntered(MouseEvent e) {
   				// TODO Auto-generated method stub
   				
   			}
   			
   			@Override
   			public void mouseClicked(MouseEvent e) {
   				// TODO Auto-generated method stub
   				if(spinner.entityTouched(e.getX(), e.getY()))
   				{
   					spinner.rotateSpinner(g2);
   				}
   			}
   		 });  
      }
      
      public Graphics2D getG2()
      {
    	  return g2;
      }
   }
}
