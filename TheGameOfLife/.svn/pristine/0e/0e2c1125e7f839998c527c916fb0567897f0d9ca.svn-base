package gameOfLife;

import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JOptionPane;

public class GameLogic {
	
	private GamePlayer currentPlayer;
	private GameBoard board;
	private ArrayList<GamePlayer> players;
	private ArrayList<GamePlayer> playersRanked;
	private ArrayList<GameAssetHouse> housesInMarket; 
	private ArrayList<GameAssetStock> stocksInMarket;
	private int currentIndex;
	private int retirementAge;
	private double currentStockMarketMultiplier;
	private double currentHousingMarketMultiplier;
	private GameEventsLog gameLog;

	public GameLogic(ArrayList<GamePlayer> players, GameBoard board, ArrayList<GameAssetHouse> housesInMarket)
	{
		this.board = board;
		this.players = players;
		this.playersRanked = players;
		this.currentIndex = 0;
		this.currentPlayer = players.get(0);
		this.currentHousingMarketMultiplier = 1.0;
		this.currentStockMarketMultiplier = 1.0;
		this.housesInMarket = housesInMarket;
		this.gameLog = new GameEventsLog();
		setRanks();
	}
	
	public void mouseClickedLogic(int xCoord, int yCoord, GameBoard board)
	{
		GameSound.clickSound.playOrResumeSound();
		
		if(board.getSpinner().entityTouched(xCoord, yCoord) && currentPlayer.isCanSpin())
		{
			board.getSpinner().rotateSpinner(board.getGameCanvas().getG2());
		}
		else if(board.getSpinner().entityTouched(xCoord, yCoord) && !currentPlayer.isCanSpin())
		{
			JOptionPane.showMessageDialog(board.getMainFrame(), "ERROR: You cannot currently use the game spinner", "ERROR", JOptionPane.ERROR_MESSAGE, null);
		}
		else if(currentPlayer.entityTouched(xCoord, yCoord))
		{
			new GamePlayerWallet(currentPlayer);
		}
	}
	
	public void playerChoiceWorkVSQueens(GamePlayer player)
	{
		Object[] options = { "Go To Work", "Go To Queens" };
		int choice = JOptionPane.showOptionDialog(null, player.getPlayerName() + ": Please select your initial choice!", player.getPlayerName() + ": Please Make A Choice",
		             JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
		             null, options, options[0]);
		
		if(choice == 0)
		{
			player.setUniversityImmediately(false);
			player.setCurrentTileNode(board.getMainGameBoardTiles().getGameBoardTileList().getHeadTileNode().getNextTileNode());
			player.getCurrentTileNode().getTile().movePlayerCoordsToTile(player);
			//player.setPlayerCareer(board.getCareers().drawThreeForDecision());
			board.updateGameBoard();
			player.setFirstTurn(false);
		}
		else if(choice == 1)
		{
			player.setUniversityImmediately(true);
			player.setCurrentTileNode(board.getMainGameBoardTiles().getGameBoardTileList().getHeadTileNode().getSideListHeadNode());
			player.getCurrentTileNode().getTile().movePlayerCoordsToTile(player);
			board.updateGameBoard();
			player.setFirstTurn(false);
		}
		else
		{
			playerChoiceWorkVSQueens(player);
		}
	}
	
	public boolean playerMustRetire(GamePlayer player)
	{
		return player.getPlayerAge() >= retirementAge;
	}
	
	public void checkPlayerAge(GamePlayer player)
	{
		if(playerMustRetire(player))
		{
			player.setInGame(false);
			player.setCurrentTileNode(null);
		}
		
		board.updateGameBoard();
	}
	
	public void moveTurnToNextPlayer()
	{
		if(currentIndex == players.size() - 1)
		{
			currentIndex = 0;
		}
		currentIndex++;
		currentPlayer = players.get(currentIndex);
		
		if(!currentPlayer.isInGame())
		{
			moveTurnToNextPlayer();
		}
	}
	
	public void sortRankedPlayers() // sort descending
	{
		for(int limit = playersRanked.size() - 1; limit > 0; limit--)
		{
			for(int i = 0; i < limit; i++)
			{				
				if(playersRanked.get(i).compareTo(playersRanked.get(i+1)) < 0) // i.e the player is 'lesser' than the player after it
				{
					swapElements(i);
				}
			}
		}
		
		setRanks();
		
	}
	
	private void setRanks()
	{
		for (int i  = 0; i < playersRanked.size(); i++)
		{
			playersRanked.get(i).setCurrentRanking(i + 1);
		}
	}
	
	public void printRankedPlayers()
	{
		for (GamePlayer gamePlayer : players) 
		{
			System.out.println(gamePlayer.getCurrentRanking() + " | " + gamePlayer.getPlayerName() );
		}
		
		System.out.println();
	}
	
	private void swapElements(int lowerIndex)
	{
		GamePlayer intermediateObject = playersRanked.get(lowerIndex);
		playersRanked.set(lowerIndex, playersRanked.get(lowerIndex + 1));
		playersRanked.set(lowerIndex + 1, intermediateObject);
	}
	
	// To help Rachael with testing the sorted array
	public boolean testRankedPlayersIsSortedDescending()
	{
		for(int i = 0; i < playersRanked.size() - 2; i++)
		{
			if(playersRanked.get(i).compareTo(playersRanked.get(i+1)) < 0) // i.e the player is 'lesser' than the player after it
			{
				return false;
			}
		}
		return true;
	}
	
	public void applyHousingMarketMultiplierToHouses()
	{
		for (GameAssetHouse gameAssetHouse : housesInMarket) 
		{
			gameAssetHouse.generateNewHousePriceUsingMarket(currentHousingMarketMultiplier);
		}
	}
	
	/**Loops through totalling all the players assets values
	 * @author Robert Kordula 40131366
	 */
	public void endGameTotalAllPlayers()
	{
		double[] playerScores = new double[players.size()];
		int highestPlayer = 0;
		for (int iii = 0; iii < players.size(); iii++)
		{
			playerScores[iii] = endGameTotalForPlayer(players.get(iii));
			if (playerScores[iii] > playerScores[highestPlayer])
			{
				highestPlayer = iii;
			}
		}
		//Add code to display winning player//
	}
	
	/**Totals the current players assets 
	 * @author Robert Kordula 40131366
	 * @param player
	 * @return total value of player assets
	 */
	public double endGameTotalForPlayer(GamePlayer player)
	{
		double playerMoney = player.getPlayerBankBalance();
		double assetsValue = 0;
		double houseValue = player.getCurrentHouse().getCurrentHousePrice() * getCurrentHousingMarketMultiplier();
		double carValue = 1000;
		double familyValue = 0;
		
		for (Iterator<Loan> iterator = player.getPlayerLoans().iterator(); iterator.hasNext();)
		{
			assetsValue -= iterator.next().getLoanAmount() * 1.5;
		}
		for (Iterator<GameAsset> iterator = player.getPlayerAssets().iterator(); iterator.hasNext();)
		{
			assetsValue += iterator.next().getCurrentAssetValue() * getCurrentStockMarketMultiplier();
		}
		for (Iterator<FamilyPegs> iterator = player.getPlayerFamily().iterator(); iterator.hasNext();)
		{
			if (iterator.next() instanceof SpousePeg)
			{
				familyValue += 2000;
			}
			else if (iterator.next() instanceof ChildPeg)
			{
				familyValue += 1000;
			}
			else
			{
				familyValue += 500;
			}
		}
		switch (player.getPlayerCar().getPlayerCar())
		{
			case TIER2:
				carValue = 4000;
			case TIER3:
				carValue = 6000;
			case TIER4:
				carValue = 8000;
				break;
			default:
			carValue = 2000;
			break;
		}
		return playerMoney + assetsValue + houseValue + carValue + familyValue;
	}
	
	public GamePlayer getCurrentPlayer() {
		return currentPlayer;
	}

	public void setCurrentPlayer(GamePlayer currentPlayer) {
		this.currentPlayer = currentPlayer;
	}

	public ArrayList<GamePlayer> getPlayers() {
		return players;
	}

	public void setPlayers(ArrayList<GamePlayer> players) {
		this.players = players;
	}

	public int getCurrentIndex() {
		return currentIndex;
	}

	public void setCurrentIndex(int currentIndex) {
		this.currentIndex = currentIndex;
	}

	public int getRetirementAge() {
		return retirementAge;
	}

	public void setRetirementAge(int retirementAge) {
		this.retirementAge = retirementAge;
	}

	public GameBoard getBoard() {
		return board;
	}

	public void setBoard(GameBoard board) {
		this.board = board;
	}

	public double getCurrentStockMarketMultiplier() {
		return currentStockMarketMultiplier;
	}

	public void setCurrentStockMarketMultiplier(double currentStockMarketMultiplier) {
		this.currentStockMarketMultiplier = currentStockMarketMultiplier;
	}

	public double getCurrentHousingMarketMultiplier() {
		return currentHousingMarketMultiplier;
	}

	public void setCurrentHousingMarketMultiplier(double currentHousingMarketMultiplier) {
		this.currentHousingMarketMultiplier = currentHousingMarketMultiplier;
	}

	public ArrayList<GamePlayer> getPlayersRanked() {
		sortRankedPlayers();
		return playersRanked;
	}

	public void setPlayersRanked(ArrayList<GamePlayer> playersRanked) {
		this.playersRanked = playersRanked;
	}

	public ArrayList<GameAssetHouse> getHousesInMarket() {
		return housesInMarket;
	}

	public void setHousesInMarket(ArrayList<GameAssetHouse> housesInMarket) {
		this.housesInMarket = housesInMarket;
	}

	public ArrayList<GameAssetStock> getStocksInMarket() {
		return stocksInMarket;
	}

	public void setStocksInMarket(ArrayList<GameAssetStock> stocksInMarket) {
		this.stocksInMarket = stocksInMarket;
	}

	public GameEventsLog getGameLog() {
		return gameLog;
	}

	public void setGameLog(GameEventsLog gameLog) {
		this.gameLog = gameLog;
	}
	
	
	
}